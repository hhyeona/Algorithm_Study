'''
문자열에 포함되는 괄호는 소괄호("()") 와 대괄호("[]")로 2종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.

모든 왼쪽 소괄호("(")는 오른쪽 소괄호(")")와만 짝을 이뤄야 한다.
모든 왼쪽 대괄호("[")는 오른쪽 대괄호("]")와만 짝을 이뤄야 한다.
모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.
모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.
짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.
정민이를 도와 문자열이 주어졌을 때 균형잡힌 문자열인지 아닌지를 판단해보자.
(입력)
하나 또는 여러줄에 걸쳐서 문자열이 주어진다. 각 문자열은 영문 알파벳, 공백, 소괄호("( )") 대괄호("[ ]")등으로 이루어져 있으며,
길이는 100글자보다 작거나 같다. 각 줄은 마침표(".")로 끝난다.
입력의 종료조건으로 맨 마지막에 점 하나(".")가 들어온다.
(출력)
각 줄마다 해당 문자열이 균형을 이루고 있으면 "yes"를, 아니면 "no"를 출력한다.

스택(stack)은 제한적으로 접근할 수 있는 나열 구조이다. 그 접근 방법은 언제나 목록의 끝에서만 일어난다.
스택은 한 쪽 끝에서만 자료를 넣거나 뺄 수 있는 선형 구조(LIFO - Last In First Out)으로 (즉, 후입선출법, 항아리구조) 되어 있다.
자료를 넣는 것을 '밀어넣는다' 하여 푸쉬(push)라고 하고 반대로 넣어둔 자료를 꺼내는 것을 팝(pop)이라고 하는데, 이때 꺼내지는 자료는 가장 최근에 푸쉬한 자료부터 나오게 된다.
 <위키백과>
1. 스택을 이용해야 한다. 함수로 만들어 줌.
2. 입력 받고, 돌면서 맞으면 pop으로 반환해서 빼주고, 안 맞으면 원래 리스트에 납둠.
3. 최종적으로 리스트가 비면 yes 아니면  no
4. .을 만나면 break .
'''
def check(a):              # 스택을 이용해 짝 맞추기.
    s = []                 # 보관할 리스트 스택 선언.
    for x in a:              # 입력 받은 값 하나씩 내줌.
        if x == '(':
            s.append(x)               # 스택에다 넣어줌.
        elif x == ')':           # 두가지 경우 생김.
            if not s or s[-1] != '(':        #스택에 아무것도 없거나, 스택 마지막 원소가 짝이 아니라면 no리턴.
                return 'no'
            else:                    # 제대로 대칭해서 만나면 짝과함께 반환해서 제거함.
                s.pop()              # 스택 리스트 비워줌.

        elif x == '[':
            s.append(x)
        elif x == ']':
            if not s or s[-1] != '[':
                return 'no'
            else:
                s.pop()

    if s:   # 남아 있으면 안되니까.
        return 'no'
    return 'yes'


while True:              # 입력받고 '.' 을 만나면 끝나는 포인트 잡아줌.
    a = input()
    if a == '.':
        break
    print(check(a))
